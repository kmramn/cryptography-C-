
#include <Windows.h>
#include <winerror.h>

#include <stdio.h>

#include <iostream>
#include <string>
#include <vector>
using namespace std;

#include <tchar.h>
#include <strsafe.h>
/*
C1: 7059452B52C6A2A304429464A655223555B35B5EB345F3F537F1D202F5D146013754FB317F2B918623264D533A3D464B141947513C50
C2: 1910596A4D1A6A2F30533E46591C51323107C474D4D5C785127513A53B6E4642421C47214FF622C2CF452186F491A3E3094F1019E427243
C3: 50174A3941A3A2B304023465FCF7231041F5B41B1D512A5E7F1A29274740766317B2C7F2C121E4352B571D2D7848551F19B101B52
C4: 19D452F41A2B303B55344649B10677445D1551594C30102D5F2CA273B5B5540BA30491E62303F461D43192A1E1A24784D5A161B2427240
C5: 511CD2B4AE2F3526133E5F1A4017215547475F585F3D5E2D533B493C264C597198204BE6239211F4A571E265D18262194E8B6423614
C6: 4D16D29451B382075552F31E1A9163E5E52141E4D453C103D5E3A4929204E514B1D473C494A3637284694F1F361E4252D455F581F2512151
C7: 19D426A570243E75752F3504E2A172445464749435E3454695530425275A474E19754642D2B253186A21591626785D5458182433151
C8: 571DD3E4B492F37364E32145F9552205141456C442E553B163E72C6E5D465E4E133A71273A3D461E4EE221E153837441B1F13E5E3514
C9: 56C596A4BF6A2D3D446785F1C121D20104564A44B3A453D1636F683A41515E4E33C434A2C3039461E4702A1E1B2F3D4D1BC1347443A51
C10: 19E4C3E4712C2C3912474CB401D311041F5B5F4E785127513A53B6E485A434E103A526267F2391E692A1E1025354F54A82547256
C11: 405959224146A3B2055675510141B39455031E5844785726163E1A3C3C484D71AF307B2C3828A1961C204B1F2E784554171747433350
C12: 1918432E41E2F3C25113E5B1740538455931E4E4E3942694237C683A40504E002671F32282C14E6A215A532B34451BC14210335A
C13: 5E1C4139402479214922465D714B77475A125248B2F552C467F8262A9404FB97550336376D74A4A43A5A533C3740581D5C14512B14
C14: 7814482442B3F2D754821464A655224515C94A5FB3E5931533B493C264C5D554E22C4219622A3D9461F275B533A2A40411D5C555345B
C15: 4B1CD3E4CC2779344F2346592F03E565C25AC6C375469542649383C485D5479327222B326D1224356F4A1B2F7848551F19B437243
C16: 56C412E4B2F3827133E5B4E71E3654151357484236573A162B6683A41517DE215E4A233129461E4EE6F5F1D2D3D45485815910265C
C17: 5C594E2350106A2E3A542B21E1AF7345815135649422A102E5933D2D2095C461C17267B2C3B6D15348C6F491A3E3095A58108453614
C18: 4F1644294149B3539442B1357F4013395415135649B305528403A7243795555DF30544A353038AE6192650146A2F404F105C1358375D
C19: 4B59412552C26207552288591D40263F5946474CC5A2D5F3D532C492E3C465971D22342436376D2B5F4B2E5A52F365D52B865D375A
*/

void PrintVec(vector<BYTE> vecVals)
{
    for (auto Val : vecVals)
    {
        cout << Val;
    }
    cout << endl;
}

void wmain()
{
    // Cipher text
    vector<vector<BYTE>> vecbyCipher = {
        { 0x70,0x59,0x45,0x2B,0x52,0x0C,0x6A,0x2A,0x30,0x44,0x29,0x46,0x4A,0x06,0x05,0x52,0x23,0x55,0x5B,0x03,0x5B,0x5E,0x0B,0x34,0x5F,0x3F,0x53,0x7F,0x1D,0x20,0x2F,0x5D,0x14,0x60,0x01,0x03,0x75,0x4F,0x0B,0x31,0x7F,0x2B,0x09,0x18,0x06,0x23,0x26,0x4D,0x53,0x3A,0x3D,0x46,0x4B,0x14,0x19,0x47,0x51,0x3C,0x50 },
        { 0x19,0x10,0x59,0x6A,0x4D,0x1A,0x6A,0x2F,0x30,0x53,0x3E,0x46,0x59,0x1C,0x05,0x13,0x23,0x10,0x7C,0x47,0x4D,0x4D,0x5C,0x78,0x51,0x27,0x51,0x3A,0x05,0x3B,0x6E,0x46,0x42,0x42,0x1C,0x47,0x21,0x4F,0x0F,0x62,0x2C,0x2C,0x0F,0x04,0x52,0x18,0x6F,0x49,0x1A,0x3E,0x30,0x09,0x4F,0x10,0x19,0x0E,0x42,0x72,0x43 },
        { 0x50,0x17,0x4A,0x39,0x04,0x1A,0x3A,0x2B,0x30,0x40,0x23,0x46,0x5F,0x0C,0x0F,0x07,0x23,0x10,0x41,0x0F,0x5B,0x41,0x0B,0x1D,0x51,0x2A,0x5E,0x7F,0x1A,0x29,0x27,0x47,0x40,0x07,0x06,0x06,0x31,0x07,0x0B,0x2C,0x7F,0x2C,0x12,0x1E,0x43,0x05,0x2B,0x57,0x1D,0x2D,0x78,0x48,0x55,0x1F,0x19,0x0B,0x10,0x1B,0x52 },
        { 0x19,0x0D,0x45,0x2F,0x04,0x1A,0x2B,0x30,0x3B,0x55,0x34,0x46,0x49,0x0B,0x10,0x06,0x77,0x44,0x5D,0x15,0x51,0x59,0x4C,0x30,0x10,0x2D,0x5F,0x2C,0x0A,0x27,0x3B,0x5B,0x55,0x40,0x0B,0x0A,0x30,0x49,0x1E,0x62,0x30,0x3F,0x46,0x1D,0x43,0x19,0x2A,0x1E,0x1A,0x24,0x78,0x4D,0x5A,0x16,0x1B,0x02,0x42,0x72,0x40 },
        { 0x51,0x1C,0x0D,0x2B,0x4A,0x0E,0x2F,0x35,0x26,0x01,0x33,0x0E,0x5F,0x1A,0x40,0x17,0x21,0x55,0x47,0x47,0x5F,0x58,0x5F,0x3D,0x5E,0x2D,0x53,0x3B,0x49,0x3C,0x26,0x4C,0x59,0x07,0x19,0x08,0x20,0x4B,0x0E,0x62,0x39,0x21,0x1F,0x4A,0x57,0x1E,0x26,0x5D,0x18,0x26,0x21,0x09,0x4E,0x08,0x0B,0x06,0x42,0x36,0x14 },
        { 0x4D,0x16,0x0D,0x29,0x45,0x1B,0x38,0x20,0x75,0x55,0x2F,0x03,0x1E,0x1A,0x09,0x16,0x3E,0x5E,0x52,0x14,0x1E,0x4D,0x45,0x3C,0x10,0x3D,0x5E,0x3A,0x49,0x29,0x20,0x4E,0x51,0x4B,0x1D,0x47,0x3C,0x49,0x4A,0x36,0x37,0x28,0x46,0x09,0x4F,0x1F,0x36,0x1E,0x04,0x25,0x2D,0x45,0x5F,0x58,0x1F,0x02,0x51,0x21,0x51 },
        { 0x19,0x0D,0x42,0x6A,0x57,0x00,0x24,0x3E,0x75,0x75,0x2F,0x03,0x50,0x4E,0x2A,0x17,0x24,0x45,0x46,0x47,0x49,0x43,0x5E,0x34,0x54,0x69,0x55,0x30,0x04,0x25,0x27,0x5A,0x47,0x4E,0x01,0x09,0x75,0x46,0x04,0x2D,0x2B,0x25,0x03,0x18,0x06,0x0A,0x21,0x59,0x16,0x26,0x78,0x5D,0x54,0x58,0x18,0x02,0x43,0x31,0x51 },
        { 0x57,0x1D,0x0D,0x3E,0x4B,0x49,0x2F,0x37,0x36,0x4E,0x32,0x14,0x5F,0x09,0x05,0x52,0x20,0x51,0x41,0x04,0x56,0x0C,0x44,0x2E,0x55,0x3B,0x16,0x3E,0x07,0x2C,0x6E,0x5D,0x46,0x5E,0x4E,0x13,0x3A,0x07,0x01,0x27,0x3A,0x3D,0x46,0x1E,0x4E,0x0E,0x22,0x1E,0x15,0x38,0x37,0x44,0x1B,0x1F,0x13,0x0E,0x5E,0x35,0x14 },
        { 0x56,0x0C,0x59,0x6A,0x4B,0x0F,0x6A,0x2D,0x3D,0x44,0x67,0x08,0x5F,0x1C,0x12,0x1D,0x20,0x10,0x45,0x06,0x4A,0x44,0x0B,0x3A,0x45,0x3D,0x16,0x36,0x0F,0x68,0x3A,0x41,0x51,0x5E,0x4E,0x03,0x3C,0x43,0x4A,0x2C,0x30,0x39,0x46,0x1E,0x47,0x00,0x2A,0x1E,0x1B,0x2F,0x3D,0x4D,0x1B,0x0C,0x13,0x47,0x44,0x3A,0x51 },
        { 0x19,0x0E,0x4C,0x3E,0x47,0x01,0x2C,0x2C,0x39,0x01,0x24,0x07,0x4C,0x0B,0x40,0x1D,0x31,0x10,0x41,0x0F,0x5B,0x5F,0x4E,0x78,0x51,0x27,0x51,0x3A,0x05,0x3B,0x6E,0x48,0x5A,0x43,0x4E,0x10,0x3A,0x52,0x06,0x26,0x7F,0x23,0x09,0x1E,0x06,0x09,0x2A,0x1E,0x10,0x25,0x35,0x4F,0x54,0x0A,0x08,0x02,0x54,0x72,0x56 },
        { 0x40,0x59,0x59,0x22,0x41,0x04,0x6A,0x3B,0x20,0x55,0x67,0x05,0x51,0x00,0x14,0x1B,0x39,0x45,0x50,0x03,0x1E,0x58,0x44,0x78,0x57,0x26,0x16,0x3E,0x1A,0x3C,0x3C,0x48,0x4D,0x07,0x1A,0x0F,0x30,0x07,0x0B,0x2C,0x38,0x28,0x0A,0x19,0x06,0x1C,0x20,0x4B,0x1F,0x2E,0x78,0x45,0x54,0x17,0x17,0x47,0x43,0x33,0x50 },
        { 0x19,0x18,0x43,0x2E,0x04,0x1E,0x2F,0x3C,0x25,0x01,0x13,0x0E,0x5B,0x17,0x40,0x05,0x38,0x45,0x59,0x03,0x1E,0x4E,0x4E,0x39,0x42,0x69,0x42,0x37,0x0C,0x68,0x3A,0x40,0x50,0x4E,0x00,0x00,0x26,0x07,0x1F,0x32,0x28,0x2C,0x14,0x0E,0x06,0x0A,0x21,0x5A,0x53,0x2B,0x34,0x45,0x1B,0x0C,0x14,0x02,0x10,0x33,0x5A },
        { 0x5E,0x1C,0x41,0x39,0x04,0x00,0x24,0x79,0x21,0x49,0x22,0x46,0x5D,0x07,0x14,0x0B,0x77,0x47,0x5A,0x12,0x52,0x48,0x0B,0x2F,0x55,0x2C,0x46,0x7F,0x08,0x26,0x2A,0x09,0x40,0x4F,0x0B,0x09,0x75,0x50,0x03,0x36,0x37,0x6D,0x07,0x4A,0x4A,0x04,0x3A,0x5A,0x53,0x3C,0x37,0x40,0x58,0x1D,0x5C,0x14,0x51,0x2B,0x14 },
        { 0x78,0x14,0x48,0x24,0x04,0x2B,0x3F,0x2D,0x75,0x48,0x21,0x46,0x4A,0x06,0x05,0x52,0x24,0x51,0x5C,0x09,0x4A,0x5F,0x0B,0x3E,0x59,0x31,0x53,0x3B,0x49,0x3C,0x26,0x4C,0x5D,0x55,0x4E,0x02,0x2C,0x42,0x19,0x62,0x2A,0x3D,0x09,0x04,0x06,0x1F,0x27,0x5B,0x53,0x3A,0x2A,0x40,0x41,0x1D,0x5C,0x05,0x55,0x34,0x5B },
        { 0x4B,0x1C,0x0D,0x3E,0x4C,0x0C,0x27,0x79,0x34,0x4F,0x23,0x46,0x59,0x02,0x0F,0x00,0x3E,0x56,0x5C,0x02,0x5A,0x0C,0x6C,0x37,0x54,0x69,0x54,0x26,0x49,0x38,0x3C,0x48,0x5D,0x54,0x07,0x09,0x32,0x07,0x22,0x2B,0x32,0x6D,0x12,0x02,0x43,0x05,0x6F,0x4A,0x1B,0x2F,0x78,0x48,0x55,0x1F,0x19,0x0B,0x43,0x72,0x43 },
        { 0x56,0x0C,0x41,0x2E,0x04,0x0B,0x2F,0x38,0x27,0x01,0x33,0x0E,0x5B,0x4E,0x07,0x1E,0x36,0x54,0x15,0x13,0x57,0x48,0x42,0x36,0x57,0x3A,0x16,0x2B,0x06,0x68,0x3A,0x41,0x51,0x07,0x0D,0x0E,0x21,0x5E,0x4A,0x23,0x31,0x29,0x46,0x1E,0x4E,0x0E,0x6F,0x5F,0x1D,0x2D,0x3D,0x45,0x48,0x58,0x15,0x09,0x10,0x26,0x5C },
        { 0x5C,0x59,0x4E,0x23,0x50,0x10,0x6A,0x2E,0x3A,0x54,0x2B,0x02,0x1E,0x1A,0x0F,0x07,0x34,0x58,0x15,0x13,0x56,0x49,0x42,0x2A,0x10,0x2E,0x59,0x33,0x0D,0x2D,0x20,0x09,0x5C,0x46,0x1C,0x17,0x26,0x07,0x0B,0x2C,0x3B,0x6D,0x15,0x03,0x48,0x0C,0x6F,0x49,0x1A,0x3E,0x30,0x09,0x5A,0x58,0x10,0x08,0x45,0x36,0x14 },
        { 0x4F,0x16,0x44,0x29,0x41,0x49,0x0B,0x35,0x39,0x44,0x2B,0x13,0x57,0x0F,0x40,0x13,0x39,0x54,0x15,0x13,0x56,0x49,0x0B,0x30,0x55,0x28,0x40,0x3A,0x07,0x24,0x37,0x09,0x55,0x55,0x0D,0x0F,0x30,0x54,0x4A,0x35,0x30,0x38,0x0A,0x0E,0x06,0x19,0x26,0x50,0x14,0x6A,0x2F,0x40,0x4F,0x10,0x5C,0x13,0x58,0x37,0x5D },
        { 0x4B,0x59,0x41,0x25,0x52,0x0C,0x26,0x20,0x75,0x52,0x28,0x08,0x59,0x1D,0x40,0x26,0x3F,0x59,0x46,0x47,0x4C,0x0C,0x5A,0x2D,0x5F,0x3D,0x53,0x2C,0x49,0x2E,0x3C,0x46,0x59,0x07,0x1D,0x02,0x23,0x42,0x04,0x36,0x37,0x6D,0x02,0x0B,0x5F,0x4B,0x2E,0x5A,0x05,0x2F,0x36,0x5D,0x52,0x0B,0x08,0x06,0x5D,0x37,0x5A } };
    vector<BYTE> vecbyKey; // Key array
    vecbyKey.assign(vecbyCipher[0].size(), 0);

    // Allocal an array of messages same as array of cipher text.
    vector<vector<BYTE>> vecbyMsgs;
    vecbyMsgs.assign(vecbyCipher.size(), vector<BYTE>(vecbyCipher[0].size(), 0));

    // Find the key by comparing the byte with every other byte in the row.
    for (int i = 0; i < vecbyCipher.size(); i++)
    {
        for (int j = 0; j < vecbyCipher[i].size(); j++)
        {
            int nBitZeroCount = 0;
            int nBitOneCount = 0;
            if (vecbyKey[j] != 0) continue;
            for (int k = 0; k < vecbyCipher.size(); k++)
            {
                if (i == k) continue;
                // Find whether the seventh bit is one or zero.
                int nBitSix = (((vecbyCipher[i][j] ^ vecbyCipher[k][j]) & 0x40) >> 6);
                if (nBitSix == 1)
                    nBitOneCount++;
                else if (vecbyCipher[i][j] != vecbyCipher[k][j])
                    nBitZeroCount++;
            }
            if (nBitOneCount > nBitZeroCount)
                vecbyKey[j] = (vecbyCipher[i][j] ^ ' ');
        }
    }

    // Decrypt the message using the key
    for (int i = 0; i < vecbyCipher.size(); i++)
    {
        for (int j = 0; j < vecbyCipher[i].size(); j++)
        {
            vecbyMsgs[i][j] = vecbyCipher[i][j] ^ vecbyKey[j];
        }
    }

    // Print the cipher text.
    wcout << L"Cipler Text." << endl;
    for (int i = 0; i < vecbyCipher.size(); i++)
    {
        PrintVec(vecbyCipher[i]);
    }
    // Print the key.
    wcout << endl << L"Recovered key." << endl;
    PrintVec(vecbyKey);
    // Print the decrypted message.
    wcout << endl << L"Decrypted message." << endl;
    for (int i = 0; i < vecbyMsgs.size(); i++)
    {
        PrintVec(vecbyMsgs[i]);
    }
}
